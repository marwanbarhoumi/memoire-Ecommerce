pipeline {
  agent any

  environment {
    DOCKER_IMAGE = 'marwen77/frontend:latest'
    DOCKER_CREDENTIALS_ID = 'docker-hub-credentials-id'
    KUBE_CONFIG_CREDENTIALS_ID = 'kubeconfig-credentials-id'
  }

  stages {
    stage('Checkout Repo') {
      steps {
        git credentialsId: '0d81d621-69e2-42f1-9117-821cbce06f5b',
            url: 'https://github.com/marwanbarhoumi/memoire-Ecommerce',
            branch: 'main'
      }
    }

    stage('Install Dependencies') {
      steps {
        dir('frontend') {
          sh 'npm install'
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir('frontend') {
          sh 'npm test || echo "Tests échoués mais on continue..."'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('frontend') {
          script {
            env.BUILT_IMAGE_ID = docker.build(env.DOCKER_IMAGE).id
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID) {
            docker.image(env.DOCKER_IMAGE).push("latest")
          }
        }
      }
    }

    stage('Deploy with Docker Compose') {
      steps {
        dir('frontend') {
          sh '''
            docker-compose down || true
            docker-compose up -d
          '''
        }
      }
    }

  stage('Deploy to Kubernetes') {
  steps {
    script {
      withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG_FILE')]) {
        sh '''
          export KUBECONFIG=${KUBECONFIG_FILE}
          kubectl config use-context minikube
          kubectl apply -f backend/login/k8s/
        '''
      }
    }
  }
}
  }

  post {
    success {
      echo '✅ Frontend pipeline completed successfully'
    }
    failure {
      echo '❌ Frontend pipeline failed'
    }
  }
}
