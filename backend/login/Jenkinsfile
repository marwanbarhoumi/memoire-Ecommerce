pipeline {
  agent any

  environment {
    DOCKER_IMAGE             = 'marwen77/login-service:latest'
    DOCKER_CREDENTIALS_ID    = 'docker-hub-credentials-id'
    KUBE_CONFIG_CREDENTIALS_ID = 'kubeconfig-credentials-id'
    KUBE_NAMESPACE           = 'memoire-ecommerce'
  }

  stages {
    stage('Checkout Repo') {
      steps {
        git credentialsId: '0d81d621-69e2-42f1-9117-821cbce06f5b',
            url: 'https://github.com/marwanbarhoumi/memoire-Ecommerce',
            branch: 'main'
        sh 'git branch -a'
      }
    }

    stage('Install Dependencies') {
      steps {
        dir('backend/login') {
          sh 'npm ci'
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir('backend/login') {
          sh 'npm test'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('backend/login') {
          script {
            docker.build(env.DOCKER_IMAGE)
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID) {
            docker.image(env.DOCKER_IMAGE).push()
          }
        }
      }
    }

    stage('Deploy with Docker Compose') {
      steps {
        dir('backend/login') {
          sh '''
            docker-compose down || true
            docker-compose up -d
          '''
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        dir('backend/login/k8s') {
          withCredentials([file(credentialsId: env.KUBE_CONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG_FILE')]) {
            sh '''
              mkdir -p ~/.kube
              cp "${KUBECONFIG_FILE}" ~/.kube/config
              chmod 600 ~/.kube/config

              # V√©rification du fichier
              head -n 5 ~/.kube/config
              kubectl config view --raw

              kubectl config use-context minikube
              kubectl cluster-info
              kubectl apply -f login-deployment.yaml -n ${KUBE_NAMESPACE}
            '''
          }
        }
      }
    }
  }

  post {
    always {
      deleteDir() // Nettoie le workspace sans plugin externe
    }
    success {
      echo '‚úÖ Pipeline completed successfully üöÄ'
    }
    failure {
      echo '‚ùå Pipeline failed'
    }
  }
}
