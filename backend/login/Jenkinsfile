pipeline {
  agent any

  environment {
    DOCKER_IMAGE = 'marwen77/login-service:latest'
    DOCKER_CREDENTIALS_ID = 'docker-hub-credentials-id'
    KUBE_CONFIG_CREDENTIALS_ID = 'kubeconfig-credentials-id'
    KUBE_NAMESPACE = 'memoire-ecommerce'
  }

  stages {
    stage('Checkout Repo') {
      steps {
        git credentialsId: '0d81d621-69e2-42f1-9117-821cbce06f5b',
            url: 'https://github.com/marwanbarhoumi/memoire-Ecommerce',
            branch: 'main'
        sh 'git branch -a'
      }
    }

    stage('Install Dependencies') {
      steps {
        dir('backend/login') {
          sh 'npm ci'  // Utilise npm ci pour des installations plus fiables que npm install
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir('backend/login') {
          sh 'npm test'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('backend/login') {
          script {
            docker.build(env.DOCKER_IMAGE)
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID) {
            docker.image(env.DOCKER_IMAGE).push()
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        dir('backend/login/k8s') {
          withCredentials([file(credentialsId: env.KUBE_CONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
            script {
              // Vérification de la connexion Kubernetes
              sh """
                export KUBECONFIG=${KUBECONFIG}
                kubectl config use-context minikube
                kubectl cluster-info
                kubectl get nodes
                
                echo "Déploiement dans le namespace ${env.KUBE_NAMESPACE}"
                kubectl apply -f login-deployment.yaml -n ${env.KUBE_NAMESPACE}
                kubectl apply -f service.yaml -n ${env.KUBE_NAMESPACE}
                
                echo "Vérification du déploiement"
                kubectl rollout status deployment/login-deployment -n ${env.KUBE_NAMESPACE} --timeout=2m
                kubectl get pods -n ${env.KUBE_NAMESPACE}
              """
            }
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()  // Nettoyage de l'espace de travail
    }
    success {
      slackSend(color: 'good', message: "✅ Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} réussi")
    }
    failure {
      slackSend(color: 'danger', message: "❌ Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} a échoué")
    }
  }
}